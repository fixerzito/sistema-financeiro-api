// <auto-generated />
using System;
using BudgetBuddy.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BudgetBuddy.Infra.Data.Migrations
{
    [DbContext(typeof(BudgetBuddyContext))]
    [Migration("20250205201831_Added")]
    partial class Added
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BudgetBuddy.Domain.Entities.BankAccounts.CategoriaContaBancaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("data_hora_criacao")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("RegistroAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true)
                        .HasColumnName("registro_ativo");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("categoria_contas_bancarias", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta Corrente",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 101,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta Poupança",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 102,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta Salário",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 103,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta de Investimentos",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 104,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta de Reserva",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 105,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta Conjunta",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 106,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta Jurídica",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 107,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta Digital",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 108,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta de Depósito",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 109,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta de Pagamento",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 110,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta de Investimento Imobiliário",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 111,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta de Previdência",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 112,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta de Fomento",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 113,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta de Pagamento Eletrônico",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 114,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta Universitária",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 115,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta Infantil",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 116,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta de Crédito",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 117,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta de Empréstimo",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 118,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta de Transferência",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 119,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Conta com Investimento Automático",
                            RegistroAtivo = true
                        });
                });

            modelBuilder.Entity("BudgetBuddy.Domain.Entities.BankAccounts.ContaBancaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("data_hora_criacao")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RegistroAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true)
                        .HasColumnName("registro_ativo");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("UsuarioId");

                    b.ToTable("contas_bancarias", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 150,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "pi pi-wallet",
                            IdCategoria = 100,
                            Nome = "Conta Corrente Banco A",
                            RegistroAtivo = true,
                            Saldo = 5000.00m
                        },
                        new
                        {
                            Id = 151,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "pi pi-money-bill",
                            IdCategoria = 101,
                            Nome = "Conta Poupança Banco B",
                            RegistroAtivo = true,
                            Saldo = 2000.00m
                        },
                        new
                        {
                            Id = 152,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "pi pi-chart-line",
                            IdCategoria = 102,
                            Nome = "Conta Salário Banco C",
                            RegistroAtivo = true,
                            Saldo = 3000.00m
                        },
                        new
                        {
                            Id = 153,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "pi pi-briefcase",
                            IdCategoria = 103,
                            Nome = "Conta de Investimentos Banco D",
                            RegistroAtivo = true,
                            Saldo = 15000.00m
                        },
                        new
                        {
                            Id = 154,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "pi pi-check",
                            IdCategoria = 104,
                            Nome = "Conta de Reserva Banco E",
                            RegistroAtivo = true,
                            Saldo = 8000.00m
                        },
                        new
                        {
                            Id = 155,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "pi pi-times",
                            IdCategoria = 105,
                            Nome = "Conta Conjunta Banco F",
                            RegistroAtivo = true,
                            Saldo = 12000.00m
                        },
                        new
                        {
                            Id = 156,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "pi pi-user",
                            IdCategoria = 106,
                            Nome = "Conta Jurídica Banco G",
                            RegistroAtivo = true,
                            Saldo = 25000.00m
                        },
                        new
                        {
                            Id = 157,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "pi pi-home",
                            IdCategoria = 107,
                            Nome = "Conta Digital Banco H",
                            RegistroAtivo = true,
                            Saldo = 4000.00m
                        },
                        new
                        {
                            Id = 158,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "pi pi-credit-card",
                            IdCategoria = 108,
                            Nome = "Conta de Depósito Banco I",
                            RegistroAtivo = true,
                            Saldo = 7000.00m
                        },
                        new
                        {
                            Id = 159,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "pi pi-wallet",
                            IdCategoria = 109,
                            Nome = "Conta de Pagamento Banco J",
                            RegistroAtivo = true,
                            Saldo = 6000.00m
                        });
                });

            modelBuilder.Entity("BudgetBuddy.Domain.Entities.CreditCards.CartaoCredito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("data_hora_criacao")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("DiaFechamento")
                        .HasColumnType("int");

                    b.Property<int>("DiaVencimento")
                        .HasColumnType("int");

                    b.Property<string>("DigBandeira")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("IdContaVinculada")
                        .HasColumnType("int");

                    b.Property<decimal>("Limite")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RegistroAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true)
                        .HasColumnName("registro_ativo");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdContaVinculada");

                    b.HasIndex("UsuarioId");

                    b.ToTable("cartoes_credito", (string)null);
                });

            modelBuilder.Entity("BudgetBuddy.Domain.Entities.Transactions.CategoriaTransacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("data_hora_criacao")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("RegistroAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true)
                        .HasColumnName("registro_ativo");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("categoria_transacoes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Transporte",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 101,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Saúde",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 102,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Laser",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 103,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Impostos",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 104,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Rendimentos",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 105,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Serviços",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 106,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Viagens",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 107,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Emergências",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 108,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Alimentação",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 109,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Jogos",
                            RegistroAtivo = true
                        });
                });

            modelBuilder.Entity("BudgetBuddy.Domain.Entities.Transactions.SubcategoriaTransacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaTransacaoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("data_hora_criacao")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("RegistroAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true)
                        .HasColumnName("registro_ativo");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaTransacaoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("subcategoria_transacoes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100,
                            CategoriaTransacaoId = 100,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Transporte Público",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 101,
                            CategoriaTransacaoId = 100,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Combustível",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 102,
                            CategoriaTransacaoId = 100,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Manutenção do Carro",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 103,
                            CategoriaTransacaoId = 101,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Plano de Saúde",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 104,
                            CategoriaTransacaoId = 101,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Medicamentos",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 105,
                            CategoriaTransacaoId = 101,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Consultas Médicas",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 106,
                            CategoriaTransacaoId = 101,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Tratamentos Estéticos",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 107,
                            CategoriaTransacaoId = 101,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Cortes de Cabelo",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 108,
                            CategoriaTransacaoId = 102,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Tratamentos Laser",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 109,
                            CategoriaTransacaoId = 102,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Equipamentos de Laser",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 110,
                            CategoriaTransacaoId = 103,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Impostos Municipais",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 111,
                            CategoriaTransacaoId = 103,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Impostos Estaduais",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 112,
                            CategoriaTransacaoId = 103,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Impostos Federais",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 113,
                            CategoriaTransacaoId = 103,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Impostos sobre Rendimento",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 114,
                            CategoriaTransacaoId = 103,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Impostos de Propriedade",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 115,
                            CategoriaTransacaoId = 104,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Investimentos em Ações",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 116,
                            CategoriaTransacaoId = 104,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Investimentos Imobiliários",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 117,
                            CategoriaTransacaoId = 104,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Fundos de Rendimento",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 118,
                            CategoriaTransacaoId = 104,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Rendimentos de Poupança",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 119,
                            CategoriaTransacaoId = 105,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Serviços Domésticos",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 120,
                            CategoriaTransacaoId = 105,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Consultoria",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 121,
                            CategoriaTransacaoId = 105,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Assinaturas de Serviços",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 122,
                            CategoriaTransacaoId = 106,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Viagens a Negócios",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 123,
                            CategoriaTransacaoId = 106,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Viagens de Lazer",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 124,
                            CategoriaTransacaoId = 106,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Passagens Aéreas",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 125,
                            CategoriaTransacaoId = 106,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Hospedagem",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 126,
                            CategoriaTransacaoId = 107,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Saúde Emergencial",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 127,
                            CategoriaTransacaoId = 107,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Ambulância",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 128,
                            CategoriaTransacaoId = 107,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Consultas de Urgência",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 129,
                            CategoriaTransacaoId = 107,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Alimentos de Emergência",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 130,
                            CategoriaTransacaoId = 108,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Alimentação no Trabalho",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 131,
                            CategoriaTransacaoId = 108,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Refeições Rápidas",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 132,
                            CategoriaTransacaoId = 108,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Mercado",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 133,
                            CategoriaTransacaoId = 108,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Restaurantes",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 134,
                            CategoriaTransacaoId = 108,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Lanches",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 135,
                            CategoriaTransacaoId = 109,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Jogos Online",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 136,
                            CategoriaTransacaoId = 109,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Jogos de Tabuleiro",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 137,
                            CategoriaTransacaoId = 109,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Cartões de Jogo",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 138,
                            CategoriaTransacaoId = 109,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Acessórios para Jogos",
                            RegistroAtivo = true
                        },
                        new
                        {
                            Id = 139,
                            CategoriaTransacaoId = 109,
                            DataHoraCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Desenvolvimento de Jogos",
                            RegistroAtivo = true
                        });
                });

            modelBuilder.Entity("BudgetBuddy.Domain.Entities.Transactions.Transacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataEfetivacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataHoraCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataPrevista")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdContaBancaria")
                        .HasColumnType("int");

                    b.Property<int>("IdSubcategoriaTransacao")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RegistroAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true)
                        .HasColumnName("registro_ativo");

                    b.Property<bool>("Status")
                        .HasColumnType("BIT");

                    b.Property<int>("TipoTransacao")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("IdContaBancaria");

                    b.HasIndex("IdSubcategoriaTransacao");

                    b.HasIndex("UsuarioId");

                    b.ToTable("transacoes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 150,
                            DataPrevista = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdContaBancaria = 158,
                            IdSubcategoriaTransacao = 132,
                            Nome = "Cooper",
                            RegistroAtivo = true,
                            Status = false,
                            TipoTransacao = 2,
                            Valor = 250m
                        });
                });

            modelBuilder.Entity("BudgetBuddy.Domain.Entities.Usuarios.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataHoraCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RegistroAtivo")
                        .HasColumnType("bit");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BudgetBuddy.Domain.Entities.BankAccounts.CategoriaContaBancaria", b =>
                {
                    b.HasOne("BudgetBuddy.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BudgetBuddy.Domain.Entities.BankAccounts.ContaBancaria", b =>
                {
                    b.HasOne("BudgetBuddy.Domain.Entities.BankAccounts.CategoriaContaBancaria", null)
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BudgetBuddy.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BudgetBuddy.Domain.Entities.CreditCards.CartaoCredito", b =>
                {
                    b.HasOne("BudgetBuddy.Domain.Entities.BankAccounts.ContaBancaria", "ContaBancaria")
                        .WithMany()
                        .HasForeignKey("IdContaVinculada")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BudgetBuddy.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ContaBancaria");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BudgetBuddy.Domain.Entities.Transactions.CategoriaTransacao", b =>
                {
                    b.HasOne("BudgetBuddy.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BudgetBuddy.Domain.Entities.Transactions.SubcategoriaTransacao", b =>
                {
                    b.HasOne("BudgetBuddy.Domain.Entities.Transactions.CategoriaTransacao", "CategoriaTransacao")
                        .WithMany("Subcategorias")
                        .HasForeignKey("CategoriaTransacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BudgetBuddy.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CategoriaTransacao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BudgetBuddy.Domain.Entities.Transactions.Transacao", b =>
                {
                    b.HasOne("BudgetBuddy.Domain.Entities.BankAccounts.ContaBancaria", "ContaBancaria")
                        .WithMany()
                        .HasForeignKey("IdContaBancaria")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BudgetBuddy.Domain.Entities.Transactions.SubcategoriaTransacao", "SubcategoriaTransacao")
                        .WithMany()
                        .HasForeignKey("IdSubcategoriaTransacao")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BudgetBuddy.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ContaBancaria");

                    b.Navigation("SubcategoriaTransacao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BudgetBuddy.Domain.Entities.Transactions.CategoriaTransacao", b =>
                {
                    b.Navigation("Subcategorias");
                });
#pragma warning restore 612, 618
        }
    }
}
